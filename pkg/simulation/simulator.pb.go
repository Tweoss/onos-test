// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: simulation/simulator.proto

package simulation

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SimulationLifecycleRequest is a simulation request
type SimulationLifecycleRequest struct {
	// simulation is the simulation name
	Simulation string `protobuf:"bytes,1,opt,name=simulation,proto3" json:"simulation,omitempty"`
	// args is the simulation arguments
	Args map[string]string `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *SimulationLifecycleRequest) Reset()         { *m = SimulationLifecycleRequest{} }
func (m *SimulationLifecycleRequest) String() string { return proto.CompactTextString(m) }
func (*SimulationLifecycleRequest) ProtoMessage()    {}
func (*SimulationLifecycleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_615ece67fe6e0607, []int{0}
}
func (m *SimulationLifecycleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimulationLifecycleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimulationLifecycleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimulationLifecycleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimulationLifecycleRequest.Merge(m, src)
}
func (m *SimulationLifecycleRequest) XXX_Size() int {
	return m.Size()
}
func (m *SimulationLifecycleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SimulationLifecycleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SimulationLifecycleRequest proto.InternalMessageInfo

func (m *SimulationLifecycleRequest) GetSimulation() string {
	if m != nil {
		return m.Simulation
	}
	return ""
}

func (m *SimulationLifecycleRequest) GetArgs() map[string]string {
	if m != nil {
		return m.Args
	}
	return nil
}

// SimulationLifecycleResponse is a response to a SimulationRequest
type SimulationLifecycleResponse struct {
}

func (m *SimulationLifecycleResponse) Reset()         { *m = SimulationLifecycleResponse{} }
func (m *SimulationLifecycleResponse) String() string { return proto.CompactTextString(m) }
func (*SimulationLifecycleResponse) ProtoMessage()    {}
func (*SimulationLifecycleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_615ece67fe6e0607, []int{1}
}
func (m *SimulationLifecycleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimulationLifecycleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimulationLifecycleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimulationLifecycleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimulationLifecycleResponse.Merge(m, src)
}
func (m *SimulationLifecycleResponse) XXX_Size() int {
	return m.Size()
}
func (m *SimulationLifecycleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SimulationLifecycleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SimulationLifecycleResponse proto.InternalMessageInfo

// SimulatorRequest is a request to run a simulation
type SimulatorRequest struct {
	// simulation is the simulation name
	Simulation string `protobuf:"bytes,1,opt,name=simulation,proto3" json:"simulation,omitempty"`
	// register is the register address
	Register string `protobuf:"bytes,2,opt,name=register,proto3" json:"register,omitempty"`
}

func (m *SimulatorRequest) Reset()         { *m = SimulatorRequest{} }
func (m *SimulatorRequest) String() string { return proto.CompactTextString(m) }
func (*SimulatorRequest) ProtoMessage()    {}
func (*SimulatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_615ece67fe6e0607, []int{2}
}
func (m *SimulatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimulatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimulatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimulatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimulatorRequest.Merge(m, src)
}
func (m *SimulatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *SimulatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SimulatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SimulatorRequest proto.InternalMessageInfo

func (m *SimulatorRequest) GetSimulation() string {
	if m != nil {
		return m.Simulation
	}
	return ""
}

func (m *SimulatorRequest) GetRegister() string {
	if m != nil {
		return m.Register
	}
	return ""
}

// SimulatorResponse is a response indicating a simulation output
type SimulatorResponse struct {
	// error is a simulation error
	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *SimulatorResponse) Reset()         { *m = SimulatorResponse{} }
func (m *SimulatorResponse) String() string { return proto.CompactTextString(m) }
func (*SimulatorResponse) ProtoMessage()    {}
func (*SimulatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_615ece67fe6e0607, []int{3}
}
func (m *SimulatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimulatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimulatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimulatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimulatorResponse.Merge(m, src)
}
func (m *SimulatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *SimulatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SimulatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SimulatorResponse proto.InternalMessageInfo

func (m *SimulatorResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*SimulationLifecycleRequest)(nil), "onos.test.simulation.SimulationLifecycleRequest")
	proto.RegisterMapType((map[string]string)(nil), "onos.test.simulation.SimulationLifecycleRequest.ArgsEntry")
	proto.RegisterType((*SimulationLifecycleResponse)(nil), "onos.test.simulation.SimulationLifecycleResponse")
	proto.RegisterType((*SimulatorRequest)(nil), "onos.test.simulation.SimulatorRequest")
	proto.RegisterType((*SimulatorResponse)(nil), "onos.test.simulation.SimulatorResponse")
}

func init() { proto.RegisterFile("simulation/simulator.proto", fileDescriptor_615ece67fe6e0607) }

var fileDescriptor_615ece67fe6e0607 = []byte{
	// 355 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x94, 0x4f, 0x4f, 0xf2, 0x40,
	0x10, 0xc6, 0x59, 0x78, 0x79, 0x23, 0x63, 0x44, 0xd8, 0x70, 0x68, 0x6a, 0xdc, 0x90, 0x1e, 0x14,
	0x2f, 0x55, 0xf1, 0xa0, 0xe1, 0xa6, 0xd1, 0x9b, 0xe1, 0x40, 0xfd, 0x00, 0x56, 0x32, 0x92, 0x46,
	0xec, 0xd6, 0xd9, 0x2d, 0xda, 0x6f, 0xe1, 0xf7, 0xf1, 0x6c, 0xe2, 0x91, 0xa3, 0x47, 0x03, 0x5f,
	0xc4, 0x00, 0xb5, 0x6d, 0x0c, 0xfe, 0xe1, 0x20, 0xb7, 0x79, 0x26, 0xd3, 0xe7, 0x37, 0xcf, 0xa4,
	0x59, 0x30, 0x95, 0x77, 0x1b, 0xf6, 0x5d, 0xed, 0x49, 0x7f, 0x37, 0x2e, 0x25, 0xd9, 0x01, 0x49,
	0x2d, 0x79, 0x4d, 0xfa, 0x52, 0xd9, 0x1a, 0x95, 0xb6, 0xd3, 0x29, 0xeb, 0x99, 0x81, 0xe9, 0x24,
	0xf2, 0xdc, 0xbb, 0xc6, 0x6e, 0xd4, 0xed, 0x63, 0x07, 0xef, 0x42, 0x54, 0x9a, 0x0b, 0x80, 0x74,
	0xd8, 0x60, 0x75, 0xd6, 0x28, 0x75, 0x32, 0x1d, 0xde, 0x86, 0x7f, 0x2e, 0xf5, 0x94, 0x91, 0xaf,
	0x17, 0x1a, 0xab, 0xcd, 0x96, 0x3d, 0x8f, 0x61, 0x7f, 0xed, 0x6f, 0x1f, 0x53, 0x4f, 0x9d, 0xf9,
	0x9a, 0xa2, 0xce, 0xd4, 0xc7, 0x3c, 0x84, 0x52, 0xd2, 0xe2, 0x15, 0x28, 0xdc, 0x60, 0x14, 0x53,
	0x27, 0x25, 0xaf, 0x41, 0x71, 0xe0, 0xf6, 0x43, 0x34, 0xf2, 0xd3, 0xde, 0x4c, 0xb4, 0xf2, 0x47,
	0xcc, 0xda, 0x84, 0x8d, 0xb9, 0x18, 0x15, 0x48, 0x5f, 0xa1, 0xd5, 0x86, 0x8a, 0xf3, 0x71, 0x8f,
	0xdf, 0x66, 0x33, 0x61, 0x85, 0xb0, 0xe7, 0x29, 0x8d, 0x14, 0xf3, 0x12, 0x6d, 0xed, 0x40, 0x35,
	0xe3, 0x37, 0x83, 0x4c, 0xb6, 0x43, 0x22, 0x49, 0xb1, 0xd7, 0x4c, 0x34, 0x9f, 0x8a, 0x19, 0xb6,
	0x83, 0x34, 0xf0, 0xba, 0xc8, 0x07, 0xb0, 0xee, 0xa0, 0x0e, 0x83, 0x74, 0x67, 0xbe, 0xb7, 0xe8,
	0xf1, 0xcc, 0xfd, 0x05, 0xbe, 0x88, 0x57, 0x8c, 0x80, 0x5f, 0xa0, 0x4b, 0xa7, 0xf2, 0xde, 0x5f,
	0x36, 0x3a, 0x84, 0x72, 0x36, 0xb2, 0xa4, 0xe5, 0x60, 0x1f, 0xa0, 0xfa, 0x29, 0xf1, 0xb2, 0xc8,
	0x2e, 0x94, 0x1d, 0xed, 0x92, 0x4e, 0xb1, 0x5b, 0xdf, 0x9a, 0x24, 0x7f, 0xa6, 0xb9, 0xfd, 0xe3,
	0x5c, 0x8c, 0xb8, 0x84, 0x35, 0x47, 0xcb, 0xe0, 0xef, 0x08, 0x27, 0xc6, 0xcb, 0x48, 0xb0, 0xe1,
	0x48, 0xb0, 0xb7, 0x91, 0x60, 0x8f, 0x63, 0x91, 0x1b, 0x8e, 0x45, 0xee, 0x75, 0x2c, 0x72, 0x57,
	0xff, 0xa7, 0xcf, 0xca, 0xc1, 0x7b, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf9, 0x5a, 0x7f, 0xe4, 0x74,
	0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SimulatorServiceClient is the client API for SimulatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SimulatorServiceClient interface {
	SetupSimulation(ctx context.Context, in *SimulationLifecycleRequest, opts ...grpc.CallOption) (*SimulationLifecycleResponse, error)
	TearDownSimulation(ctx context.Context, in *SimulationLifecycleRequest, opts ...grpc.CallOption) (*SimulationLifecycleResponse, error)
	SetupSimulator(ctx context.Context, in *SimulationLifecycleRequest, opts ...grpc.CallOption) (*SimulationLifecycleResponse, error)
	TearDownSimulator(ctx context.Context, in *SimulationLifecycleRequest, opts ...grpc.CallOption) (*SimulationLifecycleResponse, error)
	StartSimulator(ctx context.Context, in *SimulatorRequest, opts ...grpc.CallOption) (*SimulatorResponse, error)
	StopSimulator(ctx context.Context, in *SimulatorRequest, opts ...grpc.CallOption) (*SimulatorResponse, error)
}

type simulatorServiceClient struct {
	cc *grpc.ClientConn
}

func NewSimulatorServiceClient(cc *grpc.ClientConn) SimulatorServiceClient {
	return &simulatorServiceClient{cc}
}

func (c *simulatorServiceClient) SetupSimulation(ctx context.Context, in *SimulationLifecycleRequest, opts ...grpc.CallOption) (*SimulationLifecycleResponse, error) {
	out := new(SimulationLifecycleResponse)
	err := c.cc.Invoke(ctx, "/onos.test.simulation.SimulatorService/SetupSimulation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simulatorServiceClient) TearDownSimulation(ctx context.Context, in *SimulationLifecycleRequest, opts ...grpc.CallOption) (*SimulationLifecycleResponse, error) {
	out := new(SimulationLifecycleResponse)
	err := c.cc.Invoke(ctx, "/onos.test.simulation.SimulatorService/TearDownSimulation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simulatorServiceClient) SetupSimulator(ctx context.Context, in *SimulationLifecycleRequest, opts ...grpc.CallOption) (*SimulationLifecycleResponse, error) {
	out := new(SimulationLifecycleResponse)
	err := c.cc.Invoke(ctx, "/onos.test.simulation.SimulatorService/SetupSimulator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simulatorServiceClient) TearDownSimulator(ctx context.Context, in *SimulationLifecycleRequest, opts ...grpc.CallOption) (*SimulationLifecycleResponse, error) {
	out := new(SimulationLifecycleResponse)
	err := c.cc.Invoke(ctx, "/onos.test.simulation.SimulatorService/TearDownSimulator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simulatorServiceClient) StartSimulator(ctx context.Context, in *SimulatorRequest, opts ...grpc.CallOption) (*SimulatorResponse, error) {
	out := new(SimulatorResponse)
	err := c.cc.Invoke(ctx, "/onos.test.simulation.SimulatorService/StartSimulator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simulatorServiceClient) StopSimulator(ctx context.Context, in *SimulatorRequest, opts ...grpc.CallOption) (*SimulatorResponse, error) {
	out := new(SimulatorResponse)
	err := c.cc.Invoke(ctx, "/onos.test.simulation.SimulatorService/StopSimulator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SimulatorServiceServer is the server API for SimulatorService service.
type SimulatorServiceServer interface {
	SetupSimulation(context.Context, *SimulationLifecycleRequest) (*SimulationLifecycleResponse, error)
	TearDownSimulation(context.Context, *SimulationLifecycleRequest) (*SimulationLifecycleResponse, error)
	SetupSimulator(context.Context, *SimulationLifecycleRequest) (*SimulationLifecycleResponse, error)
	TearDownSimulator(context.Context, *SimulationLifecycleRequest) (*SimulationLifecycleResponse, error)
	StartSimulator(context.Context, *SimulatorRequest) (*SimulatorResponse, error)
	StopSimulator(context.Context, *SimulatorRequest) (*SimulatorResponse, error)
}

// UnimplementedSimulatorServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSimulatorServiceServer struct {
}

func (*UnimplementedSimulatorServiceServer) SetupSimulation(ctx context.Context, req *SimulationLifecycleRequest) (*SimulationLifecycleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetupSimulation not implemented")
}
func (*UnimplementedSimulatorServiceServer) TearDownSimulation(ctx context.Context, req *SimulationLifecycleRequest) (*SimulationLifecycleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TearDownSimulation not implemented")
}
func (*UnimplementedSimulatorServiceServer) SetupSimulator(ctx context.Context, req *SimulationLifecycleRequest) (*SimulationLifecycleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetupSimulator not implemented")
}
func (*UnimplementedSimulatorServiceServer) TearDownSimulator(ctx context.Context, req *SimulationLifecycleRequest) (*SimulationLifecycleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TearDownSimulator not implemented")
}
func (*UnimplementedSimulatorServiceServer) StartSimulator(ctx context.Context, req *SimulatorRequest) (*SimulatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSimulator not implemented")
}
func (*UnimplementedSimulatorServiceServer) StopSimulator(ctx context.Context, req *SimulatorRequest) (*SimulatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopSimulator not implemented")
}

func RegisterSimulatorServiceServer(s *grpc.Server, srv SimulatorServiceServer) {
	s.RegisterService(&_SimulatorService_serviceDesc, srv)
}

func _SimulatorService_SetupSimulation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimulationLifecycleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulatorServiceServer).SetupSimulation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.test.simulation.SimulatorService/SetupSimulation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulatorServiceServer).SetupSimulation(ctx, req.(*SimulationLifecycleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimulatorService_TearDownSimulation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimulationLifecycleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulatorServiceServer).TearDownSimulation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.test.simulation.SimulatorService/TearDownSimulation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulatorServiceServer).TearDownSimulation(ctx, req.(*SimulationLifecycleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimulatorService_SetupSimulator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimulationLifecycleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulatorServiceServer).SetupSimulator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.test.simulation.SimulatorService/SetupSimulator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulatorServiceServer).SetupSimulator(ctx, req.(*SimulationLifecycleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimulatorService_TearDownSimulator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimulationLifecycleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulatorServiceServer).TearDownSimulator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.test.simulation.SimulatorService/TearDownSimulator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulatorServiceServer).TearDownSimulator(ctx, req.(*SimulationLifecycleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimulatorService_StartSimulator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimulatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulatorServiceServer).StartSimulator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.test.simulation.SimulatorService/StartSimulator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulatorServiceServer).StartSimulator(ctx, req.(*SimulatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimulatorService_StopSimulator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimulatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulatorServiceServer).StopSimulator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.test.simulation.SimulatorService/StopSimulator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulatorServiceServer).StopSimulator(ctx, req.(*SimulatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SimulatorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "onos.test.simulation.SimulatorService",
	HandlerType: (*SimulatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetupSimulation",
			Handler:    _SimulatorService_SetupSimulation_Handler,
		},
		{
			MethodName: "TearDownSimulation",
			Handler:    _SimulatorService_TearDownSimulation_Handler,
		},
		{
			MethodName: "SetupSimulator",
			Handler:    _SimulatorService_SetupSimulator_Handler,
		},
		{
			MethodName: "TearDownSimulator",
			Handler:    _SimulatorService_TearDownSimulator_Handler,
		},
		{
			MethodName: "StartSimulator",
			Handler:    _SimulatorService_StartSimulator_Handler,
		},
		{
			MethodName: "StopSimulator",
			Handler:    _SimulatorService_StopSimulator_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "simulation/simulator.proto",
}

func (m *SimulationLifecycleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimulationLifecycleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimulationLifecycleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Args) > 0 {
		for k := range m.Args {
			v := m.Args[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintSimulator(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintSimulator(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintSimulator(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Simulation) > 0 {
		i -= len(m.Simulation)
		copy(dAtA[i:], m.Simulation)
		i = encodeVarintSimulator(dAtA, i, uint64(len(m.Simulation)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SimulationLifecycleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimulationLifecycleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimulationLifecycleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SimulatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimulatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimulatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Register) > 0 {
		i -= len(m.Register)
		copy(dAtA[i:], m.Register)
		i = encodeVarintSimulator(dAtA, i, uint64(len(m.Register)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Simulation) > 0 {
		i -= len(m.Simulation)
		copy(dAtA[i:], m.Simulation)
		i = encodeVarintSimulator(dAtA, i, uint64(len(m.Simulation)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SimulatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimulatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimulatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintSimulator(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSimulator(dAtA []byte, offset int, v uint64) int {
	offset -= sovSimulator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SimulationLifecycleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Simulation)
	if l > 0 {
		n += 1 + l + sovSimulator(uint64(l))
	}
	if len(m.Args) > 0 {
		for k, v := range m.Args {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovSimulator(uint64(len(k))) + 1 + len(v) + sovSimulator(uint64(len(v)))
			n += mapEntrySize + 1 + sovSimulator(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *SimulationLifecycleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SimulatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Simulation)
	if l > 0 {
		n += 1 + l + sovSimulator(uint64(l))
	}
	l = len(m.Register)
	if l > 0 {
		n += 1 + l + sovSimulator(uint64(l))
	}
	return n
}

func (m *SimulatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovSimulator(uint64(l))
	}
	return n
}

func sovSimulator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSimulator(x uint64) (n int) {
	return sovSimulator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SimulationLifecycleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSimulator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimulationLifecycleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimulationLifecycleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Simulation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSimulator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSimulator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSimulator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Simulation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSimulator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSimulator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSimulator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Args == nil {
				m.Args = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSimulator
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSimulator
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthSimulator
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthSimulator
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSimulator
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthSimulator
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthSimulator
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSimulator(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSimulator
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Args[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSimulator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSimulator
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSimulator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimulationLifecycleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSimulator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimulationLifecycleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimulationLifecycleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSimulator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSimulator
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSimulator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimulatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSimulator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimulatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimulatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Simulation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSimulator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSimulator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSimulator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Simulation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Register", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSimulator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSimulator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSimulator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Register = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSimulator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSimulator
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSimulator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimulatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSimulator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimulatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimulatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSimulator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSimulator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSimulator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSimulator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSimulator
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSimulator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSimulator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSimulator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSimulator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSimulator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSimulator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSimulator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSimulator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSimulator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSimulator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSimulator = fmt.Errorf("proto: unexpected end of group")
)
